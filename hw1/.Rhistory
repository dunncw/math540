#get data
b_housing <- read.csv("/Users/cindydunn/Desktop/Grad_School/math540/hw1/data/BostonHousing.csv")
attach(b_housing)
## Include the functions required for data partitioning
source("/Users/cindydunn/Desktop/Grad_School/math540/Variable_Selection/myfunctions copy.r")
#remove the CAT.MDEV variable
b_housing <- b_housing[,-14]
# Create training validation test data
RNGkind (sample.kind = "Rounding")
set.seed(123) ## set seed so that you get same partition each time
p3 <- partition.3(b_housing, 0.6, 0.3) ## creating 60:30:10 partition
training.data <- p3$data.train # training data
validation.data <- p3$data.val # validation data
test.data <- p3$data.test # test data
#q1
#Why should the data be partitioned into training and test sets? What will the training set be used for? What will the test set be used for?
#The data should be partitioned into training and test sets to ensure that the model is not overfitting the data. The training set will be used to fit the model and the test set will be used to evaluate the model.
#q2
#Fit a multiple linear regression model to the median house price (MEDV) as a function of CRIM, CHAS and RM. Write the equation for predicting the median house price using the predictors in the model.
fit1 <- lm(MEDV ~ CRIM + CHAS + RM, data = training.data)
summary(fit1)
#q3
#Using the estimated regression model, what median house price is predicted for a tract in the Boston area that does not bound the Charles river, has crime rate of 0.1, and where the average number of rooms per house is 6?
predict(fit1, data.frame(CRIM = 0.1, CHAS = 0, RM = 6))
#q4
#Fit a linear regression model with all 12 predictors.
fit2 <- lm(MEDV ~ ., data = training.data)
#sub1
#Report the Root mean square error of this model on test data.
yhat_test = predict(fit2,test.data)
RMSE_test = sqrt(mean((test.data$MEDV - yhat)^2))
yhat_test = predict(fit2,test.data)
RMSE_test = sqrt(mean((test.data$MEDV - yhat_test)^2))
RMSE_test
#ask teacher about this one aswell as i dont think my stepwise regression is working correctly
library(caret)
train_control <- trainControl(method = "cv", number = 5) # 5-fold cross validation
step_kcv <- train(MEDV ~ ., data = training.data, method = "lmStepAIC", trControl = train_control) # stepwise regression with cross validation
print(step_kcv)
#this is the final model
step_kcv$finalModel
# approach? Report the RMSE of this model on test data.
library(glmnet)
glmnet.lasso <- train(MEDV~ ., data = training.data, method = "glmnet", trControl = train_control, tuneGrid = expand.grid(alpha = 1,lambda = seq(0.001,0.1,by = 0.001)))
glmnet.lasso$bestTune # best lambda
lasso.model <- coef(glmnet.lasso$finalModel, glmnet.lasso$bestTune$lambda)
lasso.model # coefficients
library(gains)
pred.prob.test_1 <- predict(fit2, newdata = test.data,type = "response")
gain_1 <- gains(test.data$MEDV, pred.prob.test_1)
gain_1
# Plot Lift chart: Percent cumulative response
x_1 <- c(0, gain_1$depth)
pred.y_1 <- c(0, gain_1$cume.pct.of.total)
avg.y_1 <- c(0, gain_1$depth/100)
plot(x, pred.y, main = "Cumulative Lift Chart", xlab = "deciles",
ylab = "Percent cumulative response", type = "l", col = "red", cex.lab = 1.5)
library(gains)
pred.prob.test_1 <- predict(fit2, newdata = test.data,type = "response")
gain_1 <- gains(test.data$MEDV, pred.prob.test_1)
gain_1
# Plot Lift chart: Percent cumulative response
x_1 <- c(0, gain_1$depth)
pred.y_1 <- c(0, gain_1$cume.pct.of.total)
avg.y_1 <- c(0, gain_1$depth/100)
plot(x_1, pred.y_1, main = "Cumulative Lift Chart", xlab = "deciles",
ylab = "Percent cumulative response", type = "l", col = "red", cex.lab = 1.5)
lines(x_1, avg.y_1, type = "l")
library(gains)
pred.prob.test_2 <- predict(step_kcv$finalModel, newdata = test.data,type = "response")
gain_2 <- gains(test.data$MEDV, pred.prob.test)
library(gains)
pred.prob.test <- predict(glmnet.lasso$finalModel, newdata = test.data,type = "response")
library(gains)
pred.prob.test_2 <- predict(step_kcv$finalModel, newdata = test.data,type = "response")
gain_2 <- gains(test.data$MEDV, pred.prob.test_2)
gain_2
# Plot Lift chart: Percent cumulative response
x_2 <- c(0, gain_2$depth)
pred.y_2 <- c(0, gain_2$cume.pct.of.total)
avg.y_2 <- c(0, gain_2$depth/100)
plot(x_2, pred.y_2, main = "Cumulative Lift Chart", xlab = "deciles",
ylab = "Percent cumulative response", type = "l", col = "red", cex.lab = 1.5)
lines(x_2, avg.y_2, type = "l")
View(gain_1)
View(gain_2)
gain_1
gain_2
library(gains)
pred.prob.test <- predict(glmnet.lasso$finalModel, newdata = test.data,type = "response")
help("predict)
help("predict")
help(predict)
